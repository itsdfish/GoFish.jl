var documenterSearchIndex = {"docs":
[{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [GoFish]\nOrder   = [:type]","category":"page"},{"location":"api/#GoFish.Game","page":"API","title":"GoFish.Game","text":"Game{T} <: AbstractGame{T}\n\nA Go Fish game object where T is the player id type.\n\nFields\n\ndeck: deck of cards \nbook: a dictionary containing player id and card value:  id => value\nhand_size: maximum number of cards in each player's hand\n\n\n\n\n\n","category":"type"},{"location":"api/#GoFish.Game-Tuple{Any}","page":"API","title":"GoFish.Game","text":"Game(ids)\n\nA constructor function for simulation game \n\nArgument\n\nids: a vector or key set of player ids for book dictionary\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.Human","page":"API","title":"GoFish.Human","text":"Human{T} <: AbstractPlayer\n\nA human player game object where T is the player id type.\n\nFields\n\nid::Int: suit of card \ncards::Vector{Card}: player's cards\n\n\n\n\n\n","category":"type"},{"location":"api/#GoFish.Human-Tuple{}","page":"API","title":"GoFish.Human","text":"Human(;id)\n\nCreates a Human object\n\nKeyword\n\nid: integer representing unique id\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.InteractiveGame","page":"API","title":"GoFish.InteractiveGame","text":"InteractiveGame{T} <: AbstractGame{T}\n\nA constructor function to play Go Fish interactively where T is the player id type.\n\nArgument\n\nids: a vector of player ids for book dictionary\n\n\n\n\n\n","category":"type"},{"location":"api/#GoFish.Player","page":"API","title":"GoFish.Player","text":"Player{T} <: AbstractPlayer\n\nA Go Fish player object where T is the player id type.\n\nFields\n\nid::Int: suit of card \ncards::Vector{Card}: player's cards\n\n\n\n\n\n","category":"type"},{"location":"api/#GoFish.Player-Tuple{}","page":"API","title":"GoFish.Player","text":"Player(; id)\n\nCreates a Player object\n\nKeyword\n\nid: integer representing unique id\n\n\n\n\n\n","category":"method"},{"location":"api/#Public-Functions","page":"API","title":"Public Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [GoFish]\nOrder   = [:function]\nPrivate = false","category":"page"},{"location":"api/#GoFish.deal!-Tuple{GoFish.AbstractGame, Any}","page":"API","title":"GoFish.deal!","text":"deal!(game::AbstractGame, players)\n\nRandomizes and deals cards to each player. Each player recieves 7 cards if the number of cards  is 1-3; otherwise, each player recieves 5 cards.\n\nArguments\n\ngame: a game object \nplayers: a dictionary of players \n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.get_winners-Union{Tuple{GoFish.AbstractGame{T}}, Tuple{T}} where T","page":"API","title":"GoFish.get_winners","text":"get_winners(game::AbstractGame{T})\n\nReturns a vector of winners. In the event of a tie, there will not be a unique winner. \n\nArguments\n\ngame: game object \n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.simulate!-Tuple{GoFish.AbstractGame, Any}","page":"API","title":"GoFish.simulate!","text":"simulate!(game::AbstractGame, players)\n\nPerforms a single simulation of GoFish. \n\nArguments\n\ngame: game object \ninquirer: the player who asks for cards\nplayers: a dictionary of players.\n\n\n\n\n\n","category":"method"},{"location":"api/#Public-Functions-2","page":"API","title":"Public Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [GoFish]\nOrder   = [:function]\nPrivate = true","category":"page"},{"location":"api/#GoFish.PlayGame-Tuple{}","page":"API","title":"GoFish.PlayGame","text":"PlayGame(; ids, delay = 1.0)\n\nA constructor function for simulation game \n\nKeywords\n\nn_players: the number of player\ndelay: delay between actions\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.add!-Tuple{AbstractPlayer, Card}","page":"API","title":"GoFish.add!","text":"add!(player::AbstractPlayer, card::Card)\n\nAdd a card to a player's hand. \n\nArguments\n\nplayer: a player object\ncard: a card objects\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.add!-Tuple{AbstractPlayer, Vector{Card}}","page":"API","title":"GoFish.add!","text":"add!(player::AbstractPlayer, cards::Vector{Card})\n\nAdd a vector of cards to a player's hand. \n\nArguments\n\nplayer: a player object\ncards: a vector of card objects\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.decide-Tuple{AbstractPlayer, Any}","page":"API","title":"GoFish.decide","text":"decide(player::AbstractPlayer, ids)\n\nA default method impliments the player's decision logic and returns a tuple containing the id of the player who is queried and the rank of the card.\n\nArguments\n\nplayer: the player who makes a decision\nids: a vector of player ids \n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.go_fish-Tuple{GoFish.AbstractGame}","page":"API","title":"GoFish.go_fish","text":"go_fish(game::AbstractGame)\n\nDraw a single card from the deck.\n\nArguments\n\ngame: game object \n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.has_card-Tuple{AbstractPlayer, Any}","page":"API","title":"GoFish.has_card","text":"has_card(player::AbstractPlayer, value)\n\nCheck whether a player has a card with a specified value\n\nArguments\n\nplayer: a player object\nvalue: value or rank of a card\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.inquire!-Tuple{GoFish.AbstractGame, Any, Any}","page":"API","title":"GoFish.inquire!","text":"inquire!(game::AbstractGame, player::AbstractPlayer, players)\n\nThe primary inquiry loop in which a player asks other plays for cards.  This procedure will handle the exchange of cards, update the books, and go fish. \n\nArguments\n\ngame: game object \ninquirer: the player who asks for cards\nplayers: a dictionary of players.\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.observe_exchange!","page":"API","title":"GoFish.observe_exchange!","text":"observe_exchange!(players, inquirer, opponent_id, value, cards=Card[])\n\nLoop through all players and process the exchange of cards\n\nArguments\n\nplayers: a dictionary of players.\ninquirer: the player who asks for cards\nopponent_id: player id of player who was queried\nvalue: value of the card in the query \ncards=Card[]: a vector of cards exchanged between the inquirer and the opponent player\n\n\n\n\n\n","category":"function"},{"location":"api/#GoFish.process_books!-Tuple{AbstractPlayer, Any}","page":"API","title":"GoFish.process_books!","text":"process_books!(player::AbstractPlayer, book_map)\n\nAllow the player to track the cards that are no longer in play.\n\nArguments\n\nplayer: the player which is updated\nbook_map: a dictionary with player id as key and new book as vector of cards\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.process_exchange!-Tuple{AbstractPlayer, Vararg{Any, 4}}","page":"API","title":"GoFish.process_exchange!","text":"process_exchange!(player::AbstractPlayer, inquirer_id, opponent_id, value, cards)\n\nDefault function which allows a player to observe the exchange of cards between two players. This function must be extended for custom player types.\n\nArguments\n\nplayers: a dictionary of players. \ninquirer_id: id of the player who asks for cards\nopponent_id: player id of player who was queried\nvalue: value of the card in the query \ncards=Card[]: a vector of cards exchanged between the inquirer and the opponent player\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.process_go_fish!-Tuple{AbstractPlayer, Any, Any}","page":"API","title":"GoFish.process_go_fish!","text":"process_go_fish!(player::AbstractPlayer, inquirer_id)\n\nProcess the result of a go fish. \n\nThis function must be extended for custom player types.\n\nArguments\n\nplayer: the player which is updated\ninquirer_id: id of the player who asks for cards\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.remove!-Tuple{AbstractPlayer, Any}","page":"API","title":"GoFish.remove!","text":"remove!(player::AbstractPlayer, value)\n\nRemove and return cards of a specified value from a player.\n\nArguments\n\nplayer: a player object\nvalue: value or rank of a card\n\n\n\n\n\n","category":"method"},{"location":"api/#GoFish.setup!-Tuple{AbstractPlayer, Any}","page":"API","title":"GoFish.setup!","text":"setup!(player::AbstractPlayer, ids)\n\nPerform initial setup after cards are delt, but before the game begins.\n\nArguments\n\nplayer: a player object\nids: all player ids\n\n\n\n\n\n","category":"method"},{"location":"play/#Playing-Go-Fish","page":"Playing Go Fish","title":"Playing Go Fish","text":"","category":"section"},{"location":"play/","page":"Playing Go Fish","title":"Playing Go Fish","text":"You can play Go Fish interactively within the Julia REPL using the keyboard. Interactive play requires creating a dictionary of players, a game object, and passing both to the play function. The human player must be a Human, but the other players can be any subtype of AbstractPlayer. The following example shows how to play interactively through the REPL. In this example, your opponents are Bernice and Joy. ","category":"page"},{"location":"play/","page":"Playing Go Fish","title":"Playing Go Fish","text":"using GoFish\nids = (:you, :Bernice,:Joy)\ntypes = (Human,Player,Player)\nplayers = Dict(id => t(;id) for (t,id) in zip(types,ids))\ngame = InteractiveGame(;ids = ids)\nplay(game, players)","category":"page"},{"location":"play/","page":"Playing Go Fish","title":"Playing Go Fish","text":"(Image: image)","category":"page"},{"location":"#GoFish.jl","page":"Home","title":"GoFish.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GoFish.jl is a Julia package for playing and simulating the card game Go Fish. Use the panel on the left to navigate through the documentation.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download the most recent version of Julia. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can optionally use VsCode with the Julia VsCode plugin","category":"page"},{"location":"","page":"Home","title":"Home","text":"Enter the package mode by hitting ] and type the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add GoFish","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you prefer to install to a project specific Julia environment, cd to your project directory (use ; to access the terminal within Julia), and hit ] to enter package model and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"activate your_package_name","category":"page"},{"location":"","page":"Home","title":"Home","text":"followed by ","category":"page"},{"location":"","page":"Home","title":"Home","text":"add GoFish","category":"page"},{"location":"example/#Quick-Start","page":"Simulating Go Fish","title":"Quick Start","text":"","category":"section"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"Simulating Go Fish requires a dictionary of players, and a game object. Players must be a subtype of AbstractPlayer. If using heterogenous types, use a dictionary of type Dict{I,Union{T1,..}} to improve performance. The following code is a minimum working example of a simulation. ","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"using GoFish\nids = (:Penelope,:Manuel,:Beelzebub)\nplayers = Dict(id => Player(; id) for id in ids)\ngame = Game(ids)\nsimulate!(game, players)","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"Use get_winners to find the winners:","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"get_winners(game)","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"Access the books to show the results: ","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"game.books","category":"page"},{"location":"example/#Creating-a-Custom-Simulation","page":"Simulating Go Fish","title":"Creating a Custom Simulation","text":"","category":"section"},{"location":"example/#Creating-a-Custom-Player","page":"Simulating Go Fish","title":"Creating a Custom Player","text":"","category":"section"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"GoFish.jl allows you to create a player with custom behavior. The process involves creating a new subtype of AbstractPlayer and defining a decision method and four optional methods for setup and tracking the exchange of cards. ","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"At minimum the custom subtype requires a field id and cards. Additional fields can be included as needed.","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"mutable struct MyPlayer{T} <: AbstractPlayer\n    id::T\n    cards::Vector{Card}\nend","category":"page"},{"location":"example/#Defining-Methods","page":"Simulating Go Fish","title":"Defining Methods","text":"","category":"section"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"The API includes one required method, and four optional methods. Simply omit an optional method if you do not intend to use it. ","category":"page"},{"location":"example/#Required-Method","page":"Simulating Go Fish","title":"Required Method","text":"","category":"section"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"The decision logic of the player is written in the required method decide. This method receives the player object, and a set of player ids. decide must return a player id and a card value.  ","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"function decide(player::MyPlayer, ids)\n    # awesomeness goes here\n    return player_id,card_value\nend","category":"page"},{"location":"example/#Optional-Methods","page":"Simulating Go Fish","title":"Optional Methods","text":"","category":"section"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"After the cards are delt, initial setup of the player can be optionally performed in the function setup!, which is called once prior to the game begining. The arguments for setup are the player and player ids. ","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"function setup!(player::MyPlayer, ids)\n    # awesomeness goes here\n    return nothing\nend","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"The player's representation of the game is optionally updated through three methods: process_exchange!, process_go_fish!, and process_books!. The method process_exchange! allows the player to observe and process an exchange of cards between the inquirer and the opponent.","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"function process_exchange!(player::MyPlayer, inquirer_id, opponent_id, value, cards)\n    # awesomeness goes here\n    return nothing\nend","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"process_go_fish! allows the player to observe and that a player received an unknown card after going fish. process_go_fish! is also called when a player runs replinishes an empty hand. ","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"function process_go_fish!(player::MyPlayer, inquirer_id, n_cards)\n    # awesomeness goes here\n    return nothing\nend","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"Finally, process_books! allows the player to track which cards are no longer in play. The argument book_map is a dictionary that maps player id to a vector of cards ","category":"page"},{"location":"example/","page":"Simulating Go Fish","title":"Simulating Go Fish","text":"function process_books!(player::MyPlayer, book_map)\n    # awesomeness goes here\n    return nothing\nend","category":"page"}]
}
